name: Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version to start'
        required: true
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    steps:
      - run: echo "ACTIONS_ALLOW_UNSECURE_COMMANDS=true" >> $GITHUB_ENV

      - name: Validate input
        if: ${{ !startsWith(github.event.inputs.version, 'v') }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Release version have to start with v!')

    #   - name: Install dependencies
    #     run: |
    #       sudo apt-get -y install git-flow

    #   - name: Checkout source code
    #     uses: actions/checkout@v3
    #     with:
    #       ref: ${{ github.ref }}
    #       fetch-depth: 0

    #   - name: Initialize mandatory git config
    #     run: |
    #       git config user.name "Release manager"
    #       git config user.email noreply@github.com

    #   - name: Init git flow
    #     run: |
    #       git checkout master
    #       git checkout develop
    #       git flow init -d

    #   - name: Release start
    #     run: |
    #       git flow release start ${{ github.event.inputs.version }}

    #   - name: Release publish
    #     run: |
    #       git flow release publish

    #   - name: Release finish
    #     run: |
    #       git flow release finish ${{ github.event.inputs.version }} -m "chore: version bumped" ${{ github.event.inputs.version }}

    #   - name: Release publish tags
    #     run: |
    #       git push --all --follow-tags --no-verify

    #   - name: Checkout tag
    #     run: |
    #       git checkout ${{ github.event.inputs.version }}
      - name: Retrieve ENV
        run: |
            echo ::set-env name=CHANGELOG::$(cat projectFile | grep -Po '(?<=Version>).*(?=</Version>)')

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: ${{ github.event.inputs.version }}
          body: ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
